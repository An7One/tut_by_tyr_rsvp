syntax = "proto3";
package reservation;

import "google/protobuf/timestamp.proto";

// reverseation status for a given time period
enum ReservationStatus{
    RESERVATION_STATUS_UNKNOWN = 0;
    RESERVATION_STATUS_PENDING = 1;
    RESERVATION_STATUS_CONFIRMED = 2;
    RESERVATION_STATUS_BLOCKED = 3;
}

// when reservation is updated, to record the update type
enum ReservationUpdateType{
    RESERVATION_UPDATE_TYPE_UNKNOWN = 0;
    RESERVATION_UPDATE_TYPE_CREATE = 1;
    RESERVATION_UPDATE_TYPE_UPDATE = 2;
    RESERVATION_UPDATE_TYPE_DELETE = 3;
}

// Core reservation object.
// Contains all the information for a reservation,
// if put into ReservationRequest, id should be empty,
// if ListenResponse op is DELETE, only id will be populated.
message Reservation{
    // unique id for the reservation,
    // if put into ReservationRequest, id should be empty.
    string id = 1;
    // user id for the reservation
    string user_id = 2;
    // reservation status, used for differentiating purpose
    ReservationStatus status = 3;

    // resource reservation window
    string resource_id = 4;
    // start time for the reservation
    google.protobuf.Timestamp start = 5;
    // end time for the reservation
    google.protobuf.Timestamp end = 6;

    // extra note
    string note = 7;
}

// to make a reservation,
// to send a ReservationRequest with Reservation object (id should be empty).
message ReservationRequest{
    Reservation reservation = 1;
}

// created reservation will be returned in ReservationResponse.
message ReservationResponse{
    Reservation reservation = 1;
}

// to update a reservation,
// to send an UpdateRequest.
// Only note can be updated.
message UpdateRequest{
    Reservation reservation = 1;
}

// updated reservation will be returned via the UpdateResponse.
message UpdateResponse{
    Reservation reservation = 1;
}

// to change a reservation from pending to confirmed,
// to send a ConfirmRequest
message ConfirmRequest{
    Reservation reservation = 1;
}

// Confirmed reservation will be returned in ConfirmResponse.
message ConfirmResponse{
    Reservation reservation = 1;
}

// to cancel a reservation, send a CancelRequest.
message CancelRequest{
    string id = 1;
}

// canceled reservation will be returned in CancelResponse.
message CancelResponse{
    string id = 1;
}

// to get a reservation, send a GetRequest.
message GetRequest{
    string id = 1;
}

// Reservation will be returned in GetResponse.
message GetResponse{
    Reservation reservation = 1;
}

// query reservation by user id, resource id, start time, end time, and status
message ReservationQuery{
    // resource id for the reservation query.
    // if empty, query all resources.
    string resource_id = 1;
    // user id for the reservation query.
    // if empty, query all users.
    string user_id = 2;
    // use status to filter result.
    // if unknown, return all reservations.
    ReservationStatus status = 3;
    // start time for the reservation query,
    // if 0, use Infinity as the start time.
    google.protobuf.Timestamp start = 4;
    // end time for the reservation query.
    // if 0, use Infinity as the end time
    google.protobuf.Timestamp end = 5;
}

// to query reservations, send a QueryRequest
message QueryRequest{
    // resource id for the reservation query.
    // if empty, query all resources.
    string resource_id = 1;
    // user id for the reservation query.
    // if empty, query all users.
    string user_id = 2;
    // use status to filter result.
    // if unknown, return all reservations.
    ReservationStatus status = 3;
    // start time for the reservation query,
    // if 0, use Infinity as the start time.
    google.protobuf.Timestamp start = 4;
    // end time for the reservation query.
    // if 0, use Infinity as the end time
    google.protobuf.Timestamp end = 5;
}

// Client can listen to reservation updates by sending a ListenRequest
message ListenRequest{}

// Server will send ListenResponse to the client in streaming response.
message ListenResponse{
    // update type
    ReservationUpdateType op = 1;
    // id for the updated reservation
    Reservation reservation = 2;
}

// Reservation Service
service ReservationService{
    // make a reservation
    rpc reserve(ReservationRequest) returns (ReservationResponse);
    // confirm a pending reservation,
    // if reservation is not pending, to do nothing
    rpc confirm(ConfirmRequest) returns (ConfirmResponse);
    // update the reservation note
    rpc update(UpdateRequest) returns (UpdateResponse);
    // cancel a reservation
    rpc cancel(CancelRequest) returns (CancelResponse);
    // get a reservation
    rpc get(GetRequest) returns (GetResponse);
    // query reservations by resource id, user id, status, start time, end time
    rpc query(QueryRequest) returns (stream Reservation);
    // another system monitor newly added/confirmed/cancelled reservations
    rpc listen(ListenRequest) returns (ListenResponse);
}